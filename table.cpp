#include <iostream>
#include <array>
#include <vector>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <deque>

std::array<int, 101> primes = {
  1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541 };

int repeat(int n)
{
  if (n < 3)
    return 1;
  return (primes[n - 1] - 1) * repeat(n - 1);
}

int primorial(int n)
{
  if (n == 0)
    return 1;
  return primes[n] * primorial(n - 1);
}

int prime_index_of(int p)
{
  for (int i = 1; i < primes.size(); ++i)
    if (p == primes[i])
      return i;
  return 0;
}

struct Col
{
  int p_;
  std::vector<int> v_;
  int re_;
  bool no_parens{false};
  Col* prev_;

  void set_p(int p, Col* prev)
  {
    if (p == 2)
      v_.push_back(p);
    p_ = p;
    int n = prime_index_of(p);
    re_ = primes[n + 1] + primorial(n);
    prev_ = prev;
  }

  bool add(int p)
  {
    v_.push_back(p);
    return p < p_ * p_;
  }

  std::string print(int ci)
  {
    std::ostringstream oss;
    if (prev_ && v_[ci] % prev_->p_ == 0)
    {
      oss << '<' << prev_->p_ << '*' << (v_[ci] / prev_->p_) << '>';
      return oss.str();
    }
    if (v_[ci] >= p_ * p_)
      oss << '?';
    if (!prev_ || v_[ci] >= prev_->p_ * prev_->p_)
      no_parens = true;
    if (!no_parens)
    {
      oss << '(';
      if (v_[ci] < 10)
        oss << ' ';
    }
    oss << v_[ci];
    if (!no_parens)
      oss << ')';
    else
      oss << ' ';
    return oss.str();
  }
};

bool divisible_by_primes_below(int m, int n)
{
  for (int i = 1; i < n; ++i)
    if (m % primes[i] == 0)
      return true;
  return false;
}

int calc_row(int c)
{
  static std::deque<int> rows;
  static int next_row = 1;
  if (c >= rows.size())
  {
    rows.resize(c + 1);
    rows[c] = ++next_row;
  }
  return rows[c];
}

int main()
{
  constexpr int k = 7;
  Col col[k + 1];
  for (int n = 1; n <= k; ++n)
  {
    if (n == 1)
    {
      col[n].set_p(primes[n], nullptr);
      int cnt = 3;
      while (col[n].add(cnt))
        ++cnt;
    }
    else
    {
      col[n].set_p(primes[n], &col[n - 1]);
      int dn = n - 1;
      for (int m = col[n].p_; m <= col[n].re_; ++m)
      {
        if (m >= col[n].prev_->re_)
          dn = n;
        if (!divisible_by_primes_below(m, dn))
          col[n].add(m);
      }
    }
  }
  std::cout << "Legend:\n" <<
               " [n] : name of the Sieve in this column.\n"
               "   p : prime number generated by this Sieve.\n"
               "  ?c : candidate number generated by this Sieve, might not be a prime.\n"
               "  +g : offset between previous and next generated numbers.\n"
               "<p*f>: skipped composite from previous Sieve, where p is the prime of the previous Sieve.\n"
               " (p) : implied prime (already generated by a previous Sieve).\n"
               "(+g) : implied offset.\n"
               "Note, if new prime or candidate is given not preceeded by an offset then a previous offset\n"
               "was used: the +offsets are shown until they repeat.\n\n";

  std::vector<std::array<std::string, k>> om(1);
  std::vector<std::array<int, k>> vm(1);
  for (int n = 1; n <= k; ++n)
  {
    std::ostringstream header;
    header << '[' << primes[n] << ']';
    om[0][n - 1] = header.str();
    for (int ci = 0; ci < col[n].v_.size(); ++ci)
    {
      int row = calc_row(col[n].v_[ci]);
      while (row > om.size() - 1)
      {
        om.emplace_back();
        vm.emplace_back();
      }
      om[row][n - 1] = col[n].print(ci);
      vm[row][n - 1] = col[n].v_[ci];
    }
  }

  std::array<int, k + 1> width;
  for (int n = 1; n <= k; ++n)
    width[n] = 7;
  for (int row = 0; row < om.size(); ++row)
    for (int n = 1; n <= k; ++n)
      width[n] = std::max(width[n], (int)om[row][n - 1].length() + 1);

  int offset_n = 1;
  std::array<int, k> need_offsets = {};
  int last_n_started = 0;
  for (int row = 0; row < std::min(600, (int)om.size()); ++row)
  {
    bool next_offset_n = false;
    std::ostringstream offsets_ss;
    bool have_offset = false;
    for (int n = 1; n <= k; ++n)
    {
      bool really_print = need_offsets[n - 1] != 0 && !om[row][n - 1].empty() && om[row][n - 1][0] != '<';
      if (really_print)
      {
        std::ostringstream oss;
        int pr = row - 1;
        while (om[pr][n - 1].empty() || om[pr][n - 1][0] == '<')
          --pr;
        if (need_offsets[n - 1] == 1)
          oss << '(';
        else
          oss << ' ';
        oss << '+' << (vm[row][n - 1] - vm[pr][n - 1]);
        if (need_offsets[n - 1] == 1)
          oss << ')';
        else
          oss << ' ';
        offsets_ss << std::setw(width[n]) << oss.str();
        have_offset = true;
        if (vm[row][n - 1] == col[n].p_ + primorial(n - 1))
          need_offsets[n - 1] = 0;
      }
      if (vm[row][n - 1] == col[n].p_)
        last_n_started = n;
      if (n == offset_n && vm[row][n - 1] == col[n].p_ * col[n].p_)
      {
        next_offset_n = true;
        if (n < need_offsets.size())
          need_offsets[n] = 2;
      }
      if (really_print)
        continue;
      offsets_ss << std::setw(width[n]) << ' ';
    }
    if (have_offset)
      std::cout << offsets_ss.str() << std::endl;
    if (next_offset_n)
      ++offset_n;
    for (int n = 1; n <= k; ++n)
      std::cout << std::setw(width[n]) << om[row][n - 1]; //oss.str();
    std::cout << std::endl;
    if (last_n_started > 0)
    {
      need_offsets[last_n_started - 1] = last_n_started == 1 ? 2 : 1;
      last_n_started = 0;
    }
  }
}
